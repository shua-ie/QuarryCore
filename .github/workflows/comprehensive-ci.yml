name: QuarryCore Comprehensive CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly performance regression tests
    - cron: '0 2 * * *'
  release:
    types: [ published ]

env:
  PYTHON_VERSION_MATRIX: "3.11,3.12"
  MINIMUM_COVERAGE: 95
  PERFORMANCE_REGRESSION_THRESHOLD: 10

jobs:
  # ============================================================================
  # Code Quality and Security
  # ============================================================================
  
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,security]"
      
      - name: Code formatting check (Black)
        run: black --check --diff src/ tests/
      
      - name: Import sorting check (isort)
        run: isort --check-only --diff src/ tests/
      
      - name: Linting (Ruff)
        run: ruff check src/ tests/ --output-format=github
      
      - name: Type checking (mypy)
        run: mypy src/quarrycore --strict
      
      - name: Security scanning (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Dependency vulnerability scan (Safety)
        run: safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            safety-report.json
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Matrix Testing Across Python Versions and OS
  # ============================================================================
  
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        test-type: [unit, integration]
        include:
          # Add ARM64 testing for Pi compatibility
          - os: ubuntu-latest
            python-version: "3.11"
            test-type: unit
            arch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/ -m "unit and not slow" \
            --cov=quarrycore \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=${{ env.MINIMUM_COVERAGE }} \
            --junitxml=test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/ -m "integration and not slow" \
            --junitxml=integration-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            test-results-*.xml
            integration-results-*.xml
            htmlcov/
            .coverage
          compression-level: 6
          retention-days: 30
          include-hidden-files: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.test-type == 'unit' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # Performance and Load Testing
  # ============================================================================
  
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,performance]"
      
      - name: Run performance benchmarks
        run: |
          pytest tests/test_performance_benchmarks.py \
            -m "performance" \
            --benchmark-only \
            --benchmark-json=benchmark-results.json
      
      - name: Check performance regression
        run: |
          python scripts/check_performance_regression.py \
            --current benchmark-results.json \
            --threshold ${{ env.PERFORMANCE_REGRESSION_THRESHOLD }}
      
      - name: Run load tests
        run: |
          pytest tests/ -m "slow" --maxfail=1
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_id }}
          path: |
            benchmark-results.json
            performance-report.html
          compression-level: 6
          retention-days: 90

  # ============================================================================
  # Hardware-Specific Testing
  # ============================================================================
  
  hardware-tests:
    name: Hardware-Specific Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hardware-profile: [pi, workstation, server]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run hardware-specific tests
        run: |
          pytest tests/ -m "${{ matrix.hardware-profile }}" \
            --junitxml=hardware-${{ matrix.hardware-profile }}-results.xml
        env:
          QUARRY_HARDWARE_PROFILE: ${{ matrix.hardware-profile }}
      
      - name: Upload hardware test results
        uses: actions/upload-artifact@v4
        with:
          name: hardware-test-results-${{ matrix.hardware-profile }}-${{ github.run_id }}
          path: hardware-${{ matrix.hardware-profile }}-results.xml
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Security Testing
  # ============================================================================
  
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,security]"
      
      - name: Run security tests
        run: |
          pytest tests/test_security_comprehensive.py \
            -m "security" \
            --junitxml=security-test-results.xml
      
      - name: SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: Container security scan
        if: github.event_name == 'push'
        run: |
          docker build -t quarrycore:test .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp aquasec/trivy image quarrycore:test \
            --format json --output container-security-report.json
        continue-on-error: true
      
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results-${{ github.run_id }}
          path: |
            security-test-results.xml
            container-security-report.json
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Chaos Engineering Tests
  # ============================================================================
  
  chaos-tests:
    name: Chaos Engineering
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[chaos-test]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,chaos]"
      
      - name: Run chaos engineering tests
        run: |
          pytest tests/ -m "chaos" \
            --junitxml=chaos-test-results.xml \
            --maxfail=5
      
      - name: Upload chaos test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-test-results-${{ github.run_id }}
          path: chaos-test-results.xml
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Documentation and Examples
  # ============================================================================
  
  documentation:
    name: Documentation & Examples
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,docs]"
      
      - name: Build documentation
        run: |
          cd docs
          make html
      
      - name: Test documentation examples
        run: |
          python -m doctest README.md
          python scripts/test_examples.py
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-${{ github.run_id }}
          path: docs/_build/html/
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Docker Build and Test
  # ============================================================================
  
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        run: |
          # CPU-only image
          docker build -t quarrycore:cpu -f docker/Dockerfile.cpu .
          
          # GPU-enabled image
          docker build -t quarrycore:gpu -f docker/Dockerfile.gpu .
          
          # Pi-optimized image
          docker build -t quarrycore:pi -f docker/Dockerfile.pi .
      
      - name: Test Docker images
        run: |
          # Test CPU image
          docker run --rm quarrycore:cpu python -c "import quarrycore; print('CPU image OK')"
          
          # Test Pi image
          docker run --rm quarrycore:pi python -c "import quarrycore; print('Pi image OK')"
      
      - name: Check image sizes
        run: |
          echo "Image sizes:"
          docker images quarrycore --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"
          
          # Ensure images are reasonably sized
          CPU_SIZE=$(docker images quarrycore:cpu --format "{{.Size}}" | sed 's/MB//')
          if [ ${CPU_SIZE%.*} -gt 1000 ]; then
            echo "Warning: CPU image is larger than 1GB"
          fi
      
      - name: Security scan Docker images
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image quarrycore:cpu \
            --severity HIGH,CRITICAL --exit-code 1
        continue-on-error: true

  # ============================================================================
  # End-to-End Integration Tests
  # ============================================================================
  
  e2e-tests:
    name: End-to-End Integration
    runs-on: ubuntu-latest
    needs: [test-matrix, docker-build]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,redis]"
      
      - name: Start QuarryCore services
        run: |
          # Start the web dashboard
          python -m quarrycore.web.main &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          
          # Wait for services to start
          sleep 10
      
      - name: Run end-to-end tests
        run: |
          pytest tests/test_e2e_integration.py \
            --junitxml=e2e-test-results.xml
        env:
          REDIS_URL: redis://localhost:6379
          QUARRY_MONITORING__WEB_UI__HOST: localhost
          QUARRY_MONITORING__WEB_UI__PORT: 8000
      
      - name: Cleanup services
        if: always()
        run: |
          if [ ! -z "$WEB_PID" ]; then
            kill $WEB_PID || true
          fi
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: e2e-test-results.xml
          compression-level: 6
          retention-days: 30

  # ============================================================================
  # Release and Deployment
  # ============================================================================
  
  release:
    name: Release & Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix, security-tests, docker-build, e2e-tests]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Verify package
        run: |
          twine check dist/*
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker images
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Build and push CPU image
          docker build -t quarrycore/quarrycore:$VERSION-cpu -f docker/Dockerfile.cpu .
          docker build -t quarrycore/quarrycore:latest-cpu -f docker/Dockerfile.cpu .
          docker push quarrycore/quarrycore:$VERSION-cpu
          docker push quarrycore/quarrycore:latest-cpu
          
          # Build and push GPU image
          docker build -t quarrycore/quarrycore:$VERSION-gpu -f docker/Dockerfile.gpu .
          docker build -t quarrycore/quarrycore:latest-gpu -f docker/Dockerfile.gpu .
          docker push quarrycore/quarrycore:$VERSION-gpu
          docker push quarrycore/quarrycore:latest-gpu
          
          # Build and push Pi image
          docker build -t quarrycore/quarrycore:$VERSION-pi -f docker/Dockerfile.pi .
          docker build -t quarrycore/quarrycore:latest-pi -f docker/Dockerfile.pi .
          docker push quarrycore/quarrycore:$VERSION-pi
          docker push quarrycore/quarrycore:latest-pi
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
      
      - name: Create GitHub Release Assets
        run: |
          # Create release artifacts
          mkdir release-artifacts
          cp dist/* release-artifacts/
          cp CHANGELOG.md release-artifacts/
          cp DEPLOYMENT.md release-artifacts/
          
          # Create checksums
          cd release-artifacts
          sha256sum * > SHA256SUMS
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-artifacts/
          asset_name: quarrycore-release-artifacts.zip
          asset_content_type: application/zip

  # ============================================================================
  # Deployment to Staging
  # ============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'release' && !github.event.release.prerelease
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy to staging
        run: |
          # Extract version
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Update Kubernetes manifests
          sed -i "s/IMAGE_TAG_PLACEHOLDER/$VERSION/g" k8s/staging/*.yaml
          
          # Apply manifests
          kubectl apply -f k8s/staging/
          
          # Wait for deployment
          kubectl rollout status deployment/quarrycore-staging
      
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=quarrycore-staging --timeout=300s
          
          # Get service URL
          STAGING_URL=$(kubectl get service quarrycore-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Run smoke tests
          python scripts/smoke_tests.py --url http://$STAGING_URL:8000
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "QuarryCore ${{ github.ref }} deployed to staging"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================================================
  # Notification and Reporting
  # ============================================================================
  
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix, security-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: "*${{ github.run_id }}"
          merge-multiple: true
      
      - name: Generate test report
        run: |
          python scripts/generate_test_report.py \
            --artifacts-dir artifacts/ \
            --output test-report.html
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            QuarryCore CI/CD Pipeline Results:
            - Code Quality: ${{ needs.code-quality.result }}
            - Tests: ${{ needs.test-matrix.result }}
            - Security: ${{ needs.security-tests.result }}
            - Performance: ${{ needs.performance-tests.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: final-test-report-${{ github.run_id }}
          path: test-report.html
          compression-level: 6
          retention-days: 90 